apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'


String PROJECT_PACKAGE = (System.getProperty("user.dir"))
String RESOURCES_PATH = (PROJECT_PACKAGE + "/app/src/test/resources")
String GOOGLE_DRIVE_ID = "1Sh5z8zXRzd3hyrH3B7Yn7wIKi5UsTFVf"
String DEVICE_SAMPLES_PATH = "/sdcard/samples"
String DEVICE_ALLURE_RESULTS_PATH = "/sdcard/allure-results"
String ALLURE = RESOURCES_PATH+"/allure/bin/allure"

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }
    dependencies {
        classpath 'commons-lang:commons-lang:2.6'
        classpath "io.qameta.allure:allure-gradle:2.5"

    }
}

apply plugin: 'io.qameta.allure'

allure {
    version = '2.2.1'
    autoconfigure = true
    aspectjweaver = true
//    allureJavaVersion = LATEST_VERSION
}
apply plugin: 'com.archinamon.aspectj'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.dfrolov.allureandroidjava8"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion '28.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'org.apache.commons:commons-lang3:3.7'
//    androidTestImplementation 'org.jooq:joor:0.9.8'
    compile 'org.jooq:joor-java-8:0.9.7'
    implementation 'javax.xml.bind:jaxb-api:2.2.4'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.7.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.7.0'
    implementation 'org.apache.tika:tika-core:1.19.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-accessibility:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso.idling:idling-concurrent:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.2'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    testImplementation 'com.android.tools.ddms:ddmlib:26.2.1'


}


task downloadMediaSamplesToDevice {
    println("Choose device $System.env.ANDROID_SERIAL")
    println("Set android home $System.env.ANDROID_HOME")
    println("Set java home $System.env.JAVA_HOME")
    File samplesFile = file(PROJECT_PACKAGE + "/app/src/test/resources/samples")
    File tarFile = file(PROJECT_PACKAGE + "/app/src/test/resources/samples.tar")

    String clearAllure = ["adb", "shell", "rm", "-rf", DEVICE_ALLURE_RESULTS_PATH].execute().text
    println("Clear " + DEVICE_ALLURE_RESULTS_PATH + " directory")
    String devieSamples = ["adb", "shell", "ls", DEVICE_SAMPLES_PATH].execute().text
    println("Check media samples on device " + devieSamples)
    if (devieSamples.contains("No such file or directory") || devieSamples.equals("")) {
        println("Check media samples on PC: " + samplesFile.exists())
        if (!samplesFile.exists()) {
            samplesFile.mkdir()
            println("Download media samples from google disk...")
            final downloadResult = ['curl','-L','--user','dmytro.a.frolov:Froyman88_!','https://automotive.globallogic.com/jenkins/userContent/upload.tar','-o',tarFile].execute().text
            println(downloadResult)
            final unpack = ['tar','-xf',tarFile,'-C',samplesFile].execute().text
            println(unpack)
            tarFile.delete()
        }
        String result = ["adb",'-s',$System.env.ANDROID_SERIAL,"push", samplesFile.getPath(), DEVICE_SAMPLES_PATH].execute().text

    }
}



task runAcceptanceTests(dependsOn: [':app:connectedAndroidTest']) {
    description 'Run all acceptance tests.'
}

task wifi(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.WifiCoreSuite']
}

task bluetooth(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.BluetoothCoreSuite']
}

task media

task videoTest(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.VideoTest']
}

task videoStressTest(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.VideoStressTest']
}

task audioStressTest(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.AudioStressTest']
}

task audioTest(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.AudioTest']
}

task imageTest(type: GradleBuild) {
    tasks = ['connectedAndroidTest']
    startParameter.projectProperties = ['android.testInstrumentationRunnerArguments.class': 'com.example.dfrolov.allureandroidjava8.tests.ImageTest']
}

audioTest.finalizedBy 'imageTest'

audioStressTest.finalizedBy 'audioTest'

videoStressTest.finalizedBy 'audioStressTest'

videoTest.finalizedBy 'videoStressTest'

media.finalizedBy "videoTest"

task jenkins

jenkins.dependsOn "assembleDebug"

jenkins.finalizedBy "runAcceptanceTests"


gradle.buildFinished {
    println("After connectedInstrumentTest pull allure-results to " + PROJECT_PACKAGE + "/app/build")
    final result = ["adb",'-s',$System.env.ANDROID_SERIAL, "pull", DEVICE_ALLURE_RESULTS_PATH, PROJECT_PACKAGE + "/app/build"].execute().text
    println(result)
}
